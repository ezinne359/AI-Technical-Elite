# -*- coding: utf-8 -*-
"""ActorGenre_TCN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBMRD2aSjymjy731jeR8ugauNCrEhSy8
"""

from __future__ import print_function

import pandas as pd

#replace file name with relative location in your local folder
name_basics = pd.read_csv("names.tsv", delimiter = "\t", nrows = 200)
title_basics = pd.read_csv("titles.tsv", delimiter = "\t")

#selects people who are listed as an actor/actress
is_actor = name_basics['primaryProfession'].str.contains("actor") | name_basics['primaryProfession'].str.contains("actress")

name_actor = name_basics[is_actor]

#filters out actor/actress with no known titles
has_title = name_actor['knownForTitles'] != '\\N'
name_actor = name_actor[has_title]

has_genre = title_basics['genres'] != '\\N'
title_basics = title_basics[has_genre]

#name_actor

genre_list = []

#creates a new column genres in name_actor by referencing known titles and retrieving genre data.
for index, row in name_actor.iterrows():
    title_str = row['knownForTitles']
    title_list = title_str.split(",")
    genre_str = ''
    for i in title_list:
        title_index = title_basics.index[title_basics['tconst'] == i].tolist()
        if len(title_index) == 0:
            continue
        title_row = title_basics.at[title_index[0], 'genres']
        genre_str += title_row + ','
    genre_str = genre_str[:-1]
    genre_list.append(genre_str)


name_actor.insert(6,"genre", genre_list)
#name_actor
#export name_actor as csv
# name_actor.to_csv('actor_genre.csv')

import binascii

#get table with only specific columns
name_genre = name_actor[['nconst', 'primaryName', 'genre']]

top_genres = []
for index, row in name_genre.iterrows():
    genres = name_genre.at[index, 'genre'].split(',')
    d = {}
    for genre in genres:
        if genre not in d:
            d[genre] = 0
        d[genre] += 1
    sorted_d = sorted(d.items(), key = lambda t: t[1], reverse=True)
    top = []
    for i in range(3):
        if len(sorted_d) >= i + 1:
            top.append(sorted_d[i][0])
    top_genres.append(top)
name_genre.insert(3, 'top genres', top_genres)

#make name_genre only have the top 3 genres for each actor
name_genre = name_genre.drop(columns=['genre'])

#make dictionary mapping genres to ints
#d = {}
#i = 0
#for genre in top_genre:
#    if genre not in d:
#        d[genre] = i
#        i+= 1

#convert str names to unique int representations
names = name_genre['primaryName']
names_nums = []
for name in names:
    name_hex = binascii.hexlify(name.encode('utf-8'))
    names_nums.append(int(name_hex, 16))
        
#get top genre for each actor
top_genre = []
for index, row in name_genre.iterrows():
    top_genre.append(name_genre.at[index, 'top genres'][0])

#get list of genres by their int representations
genre_nums = []
for genre in top_genre:
    genre_nums.append(d[genre])

name_genre_identifiers = name_genre.drop(columns=['nconst', 'top genres'])
name_genre_identifiers['top genre'] = top_genre
name_genre_identifiers['name identifier'] = names_nums #model input
name_genre_identifiers['top genre identifier'] = genre_nums #model output
name_genre_identifiers

names = name_genre_identifiers['primaryName']
top_genre = name_genre_identifiers['top genre']
X_train, X_test, y_train, y_test = train_test_split(names, top_genre, test_size=0.2, random_state=0)

#model = LogisticRegression(solver='lbfgs', multi_class='multinomial')

#train the algorithm
#model.fit(X_train, y_train)
#y_pred = model.predict(X_test)
#y_pred #predicted genre

# Commented out IPython magic to ensure Python compatibility.
### above this cell is just setting data up for the model ###
### here is where we create and test the model ###
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
import seaborn as seabornInstance
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import metrics
# %matplotlib inline

# export relevant_data as csv
name_genre_identifiers = pd.read_csv('name_genre_identifiers.csv')

#!pip install finetune

#pip install absl-py

#pip install tensorflow

#! pip install tensorflow==1.15

#import tensorflow as tf

#!pip show tensorflow

#print(tf.__version__)

#! git clone https://github.com/IndicoDataSolutions/finetune
#! cd finetune
#! python3 setup.py develop
#! python3 -m spacy download en

#!pip install finetune

from finetune.base_models import BERT, BERTLarge, GPT2, GPT2Medium, GPT2Large, TextCNN, TCN, RoBERTa, DistilBERT
from finetune import Classifier

model = Classifier(base_model = TCN)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
X_test
y_pred

print(y_test)

